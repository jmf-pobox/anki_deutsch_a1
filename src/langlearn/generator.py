import csv
import random
from typing import TYPE_CHECKING

import genanki  # type: ignore

from .services import AudioService

if TYPE_CHECKING:
    from genanki import Deck, Model  # type: ignore


class AnkiDeckGenerator:
    """A class for generating custom Anki decks for German A1 vocabulary."""

    def __init__(self, deck_name: str = "German A1 Vocabulary"):
        """Initialize the deck generator with a given deck name.

        Args:
            deck_name: The name of the Anki deck to create
        """
        # Create a unique ID for the deck and models
        self.deck_id = random.randrange(1 << 30, 1 << 31)
        self.noun_model_id = random.randrange(1 << 30, 1 << 31)
        self.verb_model_id = random.randrange(1 << 30, 1 << 31)
        self.adj_model_id = random.randrange(1 << 30, 1 << 31)
        self.prep_model_id = random.randrange(1 << 30, 1 << 31)
        self.phrase_model_id = random.randrange(1 << 30, 1 << 31)

        # Create the deck
        self.deck = genanki.Deck(  # type: ignore
            self.deck_id,
            deck_name,
            "German A1 vocabulary deck generated by Langlearn",
        )

        # Initialize services
        self.audio_service = AudioService()

        # Define the models (note types)
        self._define_models()

    def _define_models(self) -> None:
        """Define the various note types for different word categories."""
        # Noun model
        self.noun_model = genanki.Model(  # type: ignore
            self.noun_model_id,
            "German Noun",
            fields=[
                {"name": "Noun"},
                {"name": "Article"},
                {"name": "English"},
                {"name": "Plural"},
                {"name": "Example"},
                {"name": "Related"},
            ],
            templates=[
                {
                    "name": "Card 1",
                    "qfmt": "{{Noun}}<br>{{Article}}",
                    "afmt": "{{FrontSide}}<hr id=answer>{{English}}<br>Plural: \
                    {{Plural}}<br>Example: {{Example}}<br>Related: {{Related}}",
                }
            ],
        )

        # Verb model
        self.verb_model = genanki.Model(
            self.verb_model_id,
            "German Verb",
            fields=[
                {"name": "Verb"},
                {"name": "English"},
                {"name": "Present_Ich"},
                {"name": "Present_Du"},
                {"name": "Present_Er"},
                {"name": "Perfect"},
                {"name": "Example"},
            ],
            templates=[
                {
                    "name": "German Verb Card",
                    "qfmt": "{{Verb}}",
                    "afmt": """
                        <div class="german">{{Verb}}</div>
                        <hr>
                        <div class="english">{{English}}</div>
                        <div class="conjugation">
                            <b>Present tense:</b><br>
                            ich {{Present_Ich}}<br>
                            du {{Present_Du}}<br>
                            er/sie/es {{Present_Er}}
                        </div>
                        <div class="perfect"><b>Perfect:</b> {{Perfect}}</div>
                        <div class="example"><b>Example:</b> {{Example}}</div>
                    """,
                },
            ],
            css="""
                .card {
                    font-family: Arial, sans-serif;
                    font-size: 18px;
                    text-align: center;
                    background-color: #f5f5f5;
                    padding: 20px;
                }
                .german {
                    font-size: 24px;
                    font-weight: bold;
                    color: #669933;
                }
                .english {
                    font-size: 20px;
                    color: #333;
                    margin: 10px 0;
                }
                .conjugation, .perfect, .example {
                    text-align: left;
                    margin: 5px 0;
                }
            """,
        )

        # Adjective/Adverb model
        self.adj_model = genanki.Model(
            self.adj_model_id,
            "German Adjective/Adverb",
            fields=[
                {"name": "Word"},
                {"name": "English"},
                {"name": "Example"},
                {"name": "Comparative"},
            ],
            templates=[
                {
                    "name": "German Adjective Card",
                    "qfmt": "{{Word}}",
                    "afmt": """
                        <div class="german">{{Word}}</div>
                        <hr>
                        <div class="english">{{English}}</div>
                        <div class="example"><b>Example:</b> {{Example}}</div>
                        <div class="comparative">{{Comparative}}</div>
                    """,
                },
            ],
            css="""
                .card {
                    font-family: Arial, sans-serif;
                    font-size: 18px;
                    text-align: center;
                    background-color: #f5f5f5;
                    padding: 20px;
                }
                .german {
                    font-size: 24px;
                    font-weight: bold;
                    color: #996633;
                }
                .english {
                    font-size: 20px;
                    color: #333;
                    margin: 10px 0;
                }
                .example, .comparative {
                    text-align: left;
                    margin: 5px 0;
                }
            """,
        )

        # Preposition model
        self.prep_model = genanki.Model(
            self.prep_model_id,
            "German Preposition",
            fields=[
                {"name": "Preposition"},
                {"name": "English"},
                {"name": "Case"},
                {"name": "Example1"},
                {"name": "Example2"},
            ],
            templates=[
                {
                    "name": "German Preposition Card",
                    "qfmt": "{{Preposition}}",
                    "afmt": """
                        <div class="german">{{Preposition}}</div>
                        <hr>
                        <div class="english">{{English}}</div>
                        <div class="case"><b>Case:</b> {{Case}}</div>
                        <div class="example"><b>Example 1:</b> {{Example1}}</div>
                        <div class="example"><b>Example 2:</b> {{Example2}}</div>
                    """,
                },
            ],
            css="""
                .card {
                    font-family: Arial, sans-serif;
                    font-size: 18px;
                    text-align: center;
                    background-color: #f5f5f5;
                    padding: 20px;
                }
                .german {
                    font-size: 24px;
                    font-weight: bold;
                    color: #993366;
                }
                .english {
                    font-size: 20px;
                    color: #333;
                    margin: 10px 0;
                }
                .case, .example {
                    text-align: left;
                    margin: 5px 0;
                }
            """,
        )

        # Phrase model
        self.phrase_model = genanki.Model(
            self.phrase_model_id,
            "German Phrase",
            fields=[
                {"name": "Phrase"},
                {"name": "English"},
                {"name": "Context"},
                {"name": "Related"},
            ],
            templates=[
                {
                    "name": "German Phrase Card",
                    "qfmt": "{{Phrase}}",
                    "afmt": """
                        <div class="german">{{Phrase}}</div>
                        <hr>
                        <div class="english">{{English}}</div>
                        <div class="context"><b>Context:</b> {{Context}}</div>
                        <div class="related">{{Related}}</div>
                    """,
                },
            ],
            css="""
                .card {
                    font-family: Arial, sans-serif;
                    font-size: 18px;
                    text-align: center;
                    background-color: #f5f5f5;
                    padding: 20px;
                }
                .german {
                    font-size: 24px;
                    font-weight: bold;
                    color: #339999;
                }
                .english {
                    font-size: 20px;
                    color: #333;
                    margin: 10px 0;
                }
                .context, .related {
                    text-align: left;
                    margin: 5px 0;
                }
            """,
        )

    def add_noun(
        self,
        noun: str,
        article: str,
        english: str,
        plural: str,
        example: str,
        related: str = "",
        audio_filename: str | None = None,
    ) -> None:
        """Add a noun card to the deck.

        Args:
            noun: The German noun
            article: The article (der/die/das)
            english: English translation
            plural: Plural form
            example: Example sentence
            related: Related words/phrases
            audio_filename: Audio filename for the card
        """
        note = genanki.Note(
            model=self.noun_model,
            fields=[
                noun,
                article,
                english,
                plural,
                example,
                related,
                audio_filename or "",
            ],
        )
        self.deck.add_note(note)  # type: ignore[no-untyped-call]

    def add_verb(
        self,
        verb: str,
        english: str,
        present_ich: str,
        present_du: str,
        present_er: str,
        perfect: str,
        example: str,
    ) -> None:
        """Add a verb card to the deck.

        Args:
            verb: The German verb in infinitive
            english: English translation
            present_ich: Present tense 1st person singular
            present_du: Present tense 2nd person singular
            present_er: Present tense 3rd person singular
            perfect: Perfect tense form
            example: Example sentence
        """
        note = genanki.Note(
            model=self.verb_model,
            fields=[
                verb,
                english,
                present_ich,
                present_du,
                present_er,
                perfect,
                example,
            ],
        )
        self.deck.add_note(note)  # type: ignore

    def add_adjective(
        self, word: str, english: str, example: str, comparative: str = ""
    ) -> None:
        """Add an adjective/adverb card to the deck.

        Args:
            word: The German adjective/adverb
            english: English translation
            example: Example sentence
            comparative: Comparative form
        """
        note = genanki.Note(
            model=self.adj_model, fields=[word, english, example, comparative]
        )
        self.deck.add_note(note)  # type: ignore[no-untyped-call]

    def add_preposition(
        self,
        preposition: str,
        english: str,
        case: str,
        example1: str,
        example2: str = "",
    ) -> None:
        """Add a preposition card to the deck.

        Args:
            preposition: The German preposition
            english: English translation
            case: Case it takes (Akkusativ/Dativ)
            example1: First example sentence
            example2: Second example sentence
        """
        note = genanki.Note(
            model=self.prep_model,
            fields=[preposition, english, case, example1, example2],
        )
        self.deck.add_note(note)  # type: ignore[no-untyped-call]

    def add_phrase(
        self, phrase: str, english: str, context: str, related: str = ""
    ) -> None:
        """Add a phrase card to the deck.

        Args:
            phrase: The German phrase
            english: English translation
            context: Usage context
            related: Related expressions
        """
        note = genanki.Note(
            model=self.phrase_model, fields=[phrase, english, context, related]
        )
        self.deck.add_note(note)  # type: ignore[no-untyped-call]

    def save_deck(self, filename: str) -> None:
        """Save the deck to an .apkg file.

        Args:
            filename: The filename to save the deck to
        """
        genanki.Package(self.deck).write_to_file(filename)  # type: ignore
        print(f"Deck saved to {filename}")

    def load_from_csv(self, csv_file: str, word_type: str) -> None:
        """Load words from a CSV file based on their type.

        Args:
            csv_file: Path to the CSV file
            word_type: Type of word (noun, verb, adjective, preposition, phrase)
        """
        with open(csv_file, encoding="utf-8") as f:
            reader = csv.DictReader(f)
            for row in reader:
                if word_type == "noun":
                    self.add_noun(
                        row["Noun"],
                        row["Article"],
                        row["English"],
                        row["Plural"],
                        row["Example"],
                        row.get("Related", ""),
                        row.get("AudioFilename", None),
                    )
                elif word_type == "verb":
                    self.add_verb(
                        row["Verb"],
                        row["English"],
                        row["Present_Ich"],
                        row["Present_Du"],
                        row["Present_Er"],
                        row["Perfect"],
                        row["Example"],
                    )
                elif word_type == "adjective":
                    self.add_adjective(
                        row["Word"],
                        row["English"],
                        row["Example"],
                        row.get("Comparative", ""),
                    )
                elif word_type == "preposition":
                    self.add_preposition(
                        row["Preposition"],
                        row["English"],
                        row["Case"],
                        row["Example1"],
                        row.get("Example2", ""),
                    )
                elif word_type == "phrase":
                    self.add_phrase(
                        row["Phrase"],
                        row["English"],
                        row["Context"],
                        row.get("Related", ""),
                    )

    def _get_audio(self, text: str) -> bytes | None:
        """Get audio for text using AWS Polly."""
        try:
            response = self.audio_service.synthesize_speech(  # type: ignore
                Text=text,
                OutputFormat="mp3",
                VoiceId="Vicki",
                Engine="neural",
                LanguageCode="de-DE",
            )
            if "AudioStream" in response:
                return response["AudioStream"].read()  # type: ignore[no-any-return]
        except Exception as e:
            print(f"Error getting audio: {e}")
            return None
        return None


def generate_audio(text: str, output_dir: str | None = None) -> str | None:
    """Generate audio for the given text using AWS Polly.

    Args:
        text: The text to convert to speech
        output_dir: Optional directory to store the audio file

    Returns:
        Path to the generated audio file or None if generation failed
    """
    service = AudioService(output_dir=output_dir) if output_dir else AudioService()
    return service.generate_audio(text)


def create_deck(name: str, description: str) -> "Deck":  # type: ignore[valid-type]
    """Create a new Anki deck."""
    deck_id = random.randrange(1 << 30, 1 << 31)
    return genanki.Deck(deck_id, name, description)  # type: ignore[no-untyped-call]


def add_note(deck: "Deck", fields: list[str], model: "Model") -> None:  # type: ignore[valid-type]
    """Add a note to the deck."""
    note = genanki.Note(model=model, fields=fields)  # type: ignore[no-untyped-call]
    deck.add_note(note)  # type: ignore[no-untyped-call]


def write_to_file(deck: "Deck", file: str, timestamp: float | None = None) -> None:  # type: ignore[valid-type]
    """Write the deck to a file."""
    package = genanki.Package(deck)  # type: ignore[no-untyped-call]
    package.write_to_file(file)  # type: ignore[no-untyped-call]
