{
  "permissions": {
    "allow": [
      "WebFetch(domain:github.com)",
      "WebFetch(domain:addon-docs.ankiweb.net)",
      "Bash(mkdir:*)",
      "Bash(hatch run test-unit:*)",
      "Bash(hatch run:*)",
      "Bash(python:*)",
      "Bash(PYTHONPATH=/Users/jfreeman/Coding/anki_deutsch_a1/src python examples/backend_demonstration.py)",
      "Bash(mypy:*)",
      "Bash(PYTHONPATH=src python examples/media_integration_demo.py)",
      "Bash(PYTHONPATH=src python -c \"\nbackend_name = ''German Adjective with Media''\nprint(''Checking note type detection...'')\nprint(''noun in note_type_id.lower():'', ''noun'' in backend_name.lower())\nprint(''verb in note_type_id.lower():'', ''verb'' in backend_name.lower())  \nprint(''adjective in note_type_id.lower():'', ''adjective'' in backend_name.lower())\nprint(''preposition in note_type_id.lower():'', ''preposition'' in backend_name.lower())\nprint(''phrase in note_type_id.lower():'', ''phrase'' in backend_name.lower())\n\")",
      "Bash(PYTHONPATH=src python examples/backend_demonstration.py)",
      "WebFetch(domain:www.pexels.com)",
      "WebSearch",
      "Bash(PYTHONPATH=src python:*)",
      "Bash(rm:*)",
      "Bash(grep:*)",
      "Bash(ruff check:*)",
      "Bash(cp:*)",
      "Bash(mv:*)",
      "Bash(unzip:*)",
      "Bash(find:*)",
      "Bash(hatch env:*)",
      "Bash(sed:*)",
      "Bash(pkill:*)",
      "Bash(sqlite3:*)",
      "Bash(touch:*)",
      "Bash(hatch:*)",
      "Bash(git add:*)",
      "Bash(git push:*)",
      "Bash(gh run view:*)",
      "Bash(gh run list:*)",
      "Bash(git commit:*)",
      "Bash(git checkout:*)",
      "Bash(gh pr view:*)",
      "Bash(gh pr checks:*)",
      "Bash(gh api:*)",
      "Bash(rg:*)",
      "Bash(gh pr checkout:*)",
      "Bash(git fetch:*)",
      "Bash(git merge:*)",
      "Bash(gh issue create:*)",
      "Bash(gh issue edit:*)",
      "Bash(timeout:*)",
      "Bash(gh issue comment:*)",
      "Bash(gh issue close:*)",
      "Bash(gh pr create:*)",
      "Bash(gh issue list:*)",
      "Bash(gh issue:*)",
      "Bash(gh pr comment:*)",
      "Bash(git pull:*)",
      "Bash(git branch:*)",
      "Bash(PYTHONPATH:*)",
      "Bash(for:*)",
      "Bash(do echo \"--- $file ---\")",
      "Bash(done)",
      "Bash(echo \"Running focused test with umlaut verbs only...\" PYTHONPATH=src python -c \"\nfrom langlearn.deck_builder import DeckBuilder\nfrom pathlib import Path\nimport tempfile\n\nprint(''''Testing with umlaut verbs only...'''')\nprint(''''='''' * 40)\n\nwith tempfile.TemporaryDirectory() as temp_dir:\n    output_dir = Path(temp_dir)\n    \n    try:\n        # Create deck with just umlaut verbs\n        with DeckBuilder(\n            deck_name=''''Umlaut Test Deck'''',\n            backend_type=''''anki'''',\n            enable_media_generation=True,\n            project_root=Path(''''test_umlaut'''')  # Use our test directory\n        ) as builder:\n            print(''''üöÄ Initialized AnkiBackend'''')\n            \n            # Load ONLY our test data\n            builder.load_data_from_directory(Path(''''test_umlaut''''))\n            \n            # Show what was loaded\n            stats = builder.get_statistics()\n            print(f''''Loaded: {stats[\"\"loaded_data\"\"]}'''')\n            \n            # Generate cards\n            print(''''üé¥ Generating cards...'''')  \n            results = builder.generate_all_cards(generate_media=True)\n            print(f''''Generated: {results}'''')\n            \n            # Export\n            output_file = output_dir / ''''umlaut_test.apkg''''\n            builder.export_deck(output_file)\n            \n            if output_file.exists():\n                print(f''''‚úÖ Deck exported: {output_file}'''')\n                print(f''''Size: {output_file.stat().st_size} bytes'''')\n            else:\n                print(''''‚ùå Export failed'''')\n                \n    except Exception as e:\n        print(f''''ERROR: {e}'''')\n        import traceback\n        traceback.print_exc()\n\nprint(''''Focused umlaut test complete!'''')\n\")",
      "Bash(echo \"Running focused test with umlaut verbs (fixed)...\" PYTHONPATH=src python -c \"\nfrom langlearn.deck_builder import DeckBuilder\nfrom pathlib import Path\nimport tempfile\nimport shutil\n\nprint(''''Testing with umlaut verbs only...'''')\nprint(''''='''' * 40)\n\n# Copy test data to main data directory temporarily\ntest_file = Path(''''test_umlaut/verbs_unified.csv'''')\nmain_data_dir = Path(''''data'''')\nbackup_file = main_data_dir / ''''verbs_unified_backup.csv''''\n\n# Backup original and replace with test\nif (main_data_dir / ''''verbs_unified.csv'''').exists():\n    shutil.copy2(main_data_dir / ''''verbs_unified.csv'''', backup_file)\nshutil.copy2(test_file, main_data_dir / ''''verbs_unified.csv'''')\n\ntry:\n    with tempfile.TemporaryDirectory() as temp_dir:\n        output_dir = Path(temp_dir)\n        \n        # Create deck with just umlaut verbs\n        with DeckBuilder(\n            deck_name=''''Umlaut Test Deck'''',\n            backend_type=''''anki'''',\n            enable_media_generation=True\n        ) as builder:\n            print(''''üöÄ Initialized AnkiBackend'''')\n            \n            # Load data\n            builder.load_data_from_directory(main_data_dir)\n            \n            # Show what was loaded\n            stats = builder.get_statistics()\n            verb_count = stats[''''loaded_data''''].get(''''verb_conjugation'''', 0)\n            print(f''''Loaded {verb_count} verb records'''')\n            \n            if verb_count > 0:\n                # Generate cards\n                print(''''üé¥ Generating cards...'''')  \n                results = builder.generate_all_cards(generate_media=True)\n                print(f''''Generated: {sum(results.values())} total cards'''')\n                \n                # Export\n                output_file = output_dir / ''''umlaut_test.apkg''''\n                builder.export_deck(output_file)\n                \n                if output_file.exists():\n                    print(f''''‚úÖ Deck exported: {output_file.stat().st_size} bytes'''')\n                else:\n                    print(''''‚ùå Export failed'''')\n            else:\n                print(''''‚ùå No verbs loaded'''')\n                \nexcept Exception as e:\n    print(f''''ERROR: {e}'''')\n    import traceback  \n    traceback.print_exc()\nfinally:\n    # Restore original file\n    if backup_file.exists():\n        shutil.move(backup_file, main_data_dir / ''''verbs_unified.csv'''')\n    else:\n        # Remove test file if no backup existed\n        (main_data_dir / ''''verbs_unified.csv'''').unlink(missing_ok=True)\n\nprint(''''Test complete!'''')\n\")",
      "Bash(coverage report:*)"
    ],
    "deny": []
  }
}