name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install Hatch
      run: pip install hatch
    
    - name: Run linting
      run: hatch run lint
    
    - name: Run type checking
      run: hatch run type

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Hatch
      run: pip install hatch
    
    - name: Run unit tests with coverage
      run: hatch run test-unit-cov
    
    - name: Upload coverage reports to Codecov
      if: matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    # Only run integration tests on pull requests to main or when explicitly requested
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install Hatch
      run: pip install hatch
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      continue-on-error: true
    
    - name: Set up API keys
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        PEXELS_API_KEY: ${{ secrets.PEXELS_API_KEY }}
      run: |
        # Set API keys in environment for integration tests
        echo "API keys configured for integration tests"
      continue-on-error: true
    
    - name: Run integration tests
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        PEXELS_API_KEY: ${{ secrets.PEXELS_API_KEY }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      run: hatch run test-integration
      continue-on-error: true
    
    - name: Comment on PR if integration tests fail
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '⚠️ Integration tests failed. This may be due to missing API keys or external service issues. Unit tests and linting must still pass.'
          })

  coverage-report:
    name: Coverage Report  
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install Hatch
      run: pip install hatch
    
    - name: Generate coverage report
      run: |
        hatch run test-cov
        echo "COVERAGE_PERCENT=$(hatch run pytest --cov=src/langlearn --cov-report=term | grep TOTAL | awk '{print $4}' | sed 's/%//')" >> $GITHUB_ENV
    
    - name: Comment coverage on PR
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = process.env.COVERAGE_PERCENT;
          const coverageNum = parseFloat(coverage);
          const emoji = coverageNum >= 80 ? '✅' : coverageNum >= 70 ? '⚠️' : '❌';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `${emoji} **Test Coverage: ${coverage}%**\n\nCurrent target: 73.84% (must not decrease)\nTarget goal: 85%+`
          })